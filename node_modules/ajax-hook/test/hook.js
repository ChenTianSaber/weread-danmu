"use strict";
exports.__esModule = true;
var index_1 = require("../index");
var test_1 = require("./test");
function testHook() {
    (0, test_1.testRequest)(location.href);
    // testRequest('https://aa');
}
var _a = (0, index_1.hook)({
    onreadystatechange: function (xhr) {
        console.log("1. onreadystatechange");
    },
    onload: function (xhr) {
        console.log("1. onload");
        // xhr.getProxy().responseText='xhr.responseText'
        this.responseText = "hookAjax" + xhr.responseText;
    },
    onerror: function (xhr) {
        console.log("1. onerror");
    },
    open: function (arg, xhr) {
        //add tag
        arg[1] += "&hook_tag=1";
        console.log("1. open");
    },
    send: function (arg, xhr) {
        console.log("1. send");
        xhr.setRequestHeader("_custom_header_1", "ajaxhook1");
    },
    setRequestHeader: function (args, xhr) {
        console.log("1. setRequestHeader");
    },
    response: {
        getter: function () {
            return { data: '1 res' };
        },
        setter: function (value, target) {
            console.log('1. set response');
            return '1. set response: set response value';
        }
    }
}), unHook1 = _a.unHook, originXhr1 = _a.originXhr;
var _b = (0, index_1.hook)({
    onreadystatechange: function (xhr) {
        console.log("2. onreadystatechange");
    },
    onload: function (xhr) {
        console.log("2. onload");
        // xhr.getProxy().responseText='xhr.responseText'
        this.responseText = "hookAjax" + xhr.responseText;
    },
    onerror: function (xhr) {
        console.log("2. onerror");
    },
    open: function (arg, xhr) {
        //add tag
        arg[1] += "?hook_tag=2";
        console.log("2. open");
    },
    send: function (arg, xhr) {
        console.log("2. send");
        xhr.setRequestHeader("_custom_header_2", "ajaxhook2");
    },
    setRequestHeader: function (args, xhr) {
        console.log("2. setRequestHeader");
    },
    response: {
        getter: function () {
            return { data: '2. res' };
        },
        setter: function (value, target) {
            console.log('2. set response');
            return '2. set response';
        }
    }
}), unHook2 = _b.unHook, originXhr2 = _b.originXhr;
unHook1();
// unHook2();
testHook();
